// lib/api/api_service.dart

import 'dart:convert';
import 'package:app_oracel999/model/request/cash_in_request.dart';
import 'package:app_oracel999/model/request/purchase_request.dart';
import 'package:app_oracel999/model/response/profile_models.dart';
import 'package:http/http.dart' as http;

// --- Imports ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Models ‡πÅ‡∏•‡∏∞ Config ---
import '../config/app_config.dart';
import '../model/request/login_request.dart';
import '../model/request/register_request.dart'; // üëà 1. Import RegisterRequest Model
import '../model/response/user_response.dart';
import '../model/response/lotto_item.dart';
import '../model/response/wallet_response.dart';
import '../model/response/check_response.dart';

class ApiService {
  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Login (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
  Future<User> login(LoginRequest request) async {
    final url = Uri.parse('${AppConfig.baseUrl}/login');

    try {
      final response = await http
          .post(
            url,
            headers: {'Content-Type': 'application/json'},
            body: jsonEncode(request.toJson()),
          )
          .timeout(const Duration(seconds: 15));

      final responseData = jsonDecode(response.body);

      if (response.statusCode == 200 && responseData['status'] == 'success') {
        return User.fromJson(responseData);
      } else {
        final message = responseData['message'] ?? '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        throw Exception(message);
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  }

  // --- üëá 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Register ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà ---
  Future<void> register(RegisterRequest request) async {
    final url = Uri.parse('${AppConfig.baseUrl}/register');

    try {
      final response = await http
          .post(
            url,
            headers: {'Content-Type': 'application/json'},
            body: jsonEncode(request.toJson()),
          )
          .timeout(const Duration(seconds: 15));

      final responseData = jsonDecode(response.body);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // (‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Future<void> ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ)
      if (response.statusCode != 200 || responseData['status'] != 'ok') {
        final message = responseData['message'] ?? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ';
        throw Exception(message);
      }
    } catch (e) {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô Timeout, ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

  // --- 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô home  ---

  Future<Map<String, List<LottoItem>>> fetchHomePageData() async {
    final luckyUrl = Uri.parse('${AppConfig.baseUrl}/lotto/lucky');
    final auspiciousUrl = Uri.parse('${AppConfig.baseUrl}/lotto/Auspicious');

    try {
      // ‡∏¢‡∏¥‡∏á API 2 ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
      final responses = await Future.wait([
        http.get(luckyUrl).timeout(const Duration(seconds: 10)),
        http.get(auspiciousUrl).timeout(const Duration(seconds: 10)),
      ]);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á 2 requests ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (responses[0].statusCode == 200 && responses[1].statusCode == 200) {
        final luckyData = jsonDecode(responses[0].body);
        final List<dynamic> luckyJson = luckyData['data'] ?? [];
        final luckyLottos = luckyJson.map((json) => LottoItem.fromJson(json)).toList();

        final auspiciousData = jsonDecode(responses[1].body);
        final List<dynamic> auspiciousJson = auspiciousData['data'] ?? [];
        final auspiciousLottos = auspiciousJson.map((json) => LottoItem.fromJson(json)).toList();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô Map ‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        return {
          'luckyLottos': luckyLottos,
          'auspiciousLottos': auspiciousLottos,
        };
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ request ‡πÉ‡∏î request ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

  // --- 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Wallet  ---
  Future<Wallet> fetchWalletBalance(String userId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/wallet?user_id=$userId');

    try {
      final response = await http.get(url).timeout(const Duration(seconds: 10));

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        // ‡πÉ‡∏´‡πâ Wallet Model ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô Object
        return Wallet.fromJson(data);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 200
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${response.statusCode}');
      }
    } catch (e) {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

  // --- 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ---
  Future<List<CurrentReward>> fetchLatestRewards() async {
  final url = Uri.parse('${AppConfig.baseUrl}/rewards/currsent');
  try {
    final response = await http.get(url).timeout(const Duration(seconds: 10));
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body)['data'] as List;
      return data.map((e) => CurrentReward.fromJson(e)).toList();
    } else {
      throw Exception('‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏´‡∏±‡∏™: ${response.statusCode})');
    }
  } catch (e) {
    throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
  }
}


  // --- 6. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ---
  Future<CheckResult> checkLottoNumber(String number) async {
    final url = Uri.parse('${AppConfig.baseUrl}/rewards/check?number=$number');
    try {
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      if (response.statusCode == 200) {
        // ‡πÉ‡∏´‡πâ Model ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏à‡∏≤‡∏Å key 'data'
        return CheckResult.fromJson(jsonDecode(response.body)['data']);
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ (‡∏£‡∏´‡∏±‡∏™: ${response.statusCode})');
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

  // ---  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ---
  Future<UserProfile> fetchUserProfile(String userId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/profile?user_id=$userId');
    try {
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      if (response.statusCode == 200) {
        return UserProfile.fromJson(jsonDecode(response.body));
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

  // --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ---
  Future<List<PurchasedLotto>> fetchUserPurchases(String userId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/users/purchases?user_id=$userId');
    try {
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final List<dynamic> itemsJson = data['data'] ?? [];
        return itemsJson.map((json) => PurchasedLotto.fromJson(json)).toList();
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

   // --- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ---
  Future<void> createPurchase(PurchaseRequest request) async {
    final url = Uri.parse('${AppConfig.baseUrl}/purchases');

    try {
      final response = await http
          .post(
            url,
            headers: {'Content-Type': 'application/json'},
            body: jsonEncode(request.toJson()),
          )
          .timeout(const Duration(seconds: 15));

      final responseData = jsonDecode(response.body);

      if (response.statusCode != 200 || responseData['status'] != 'success') {
        final message = responseData['message'] ?? '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠';
        throw Exception(message);
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

  // --- üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" ---
  Future<List<LottoItem>> searchLotto(String query) async {
    final url = Uri.parse('${AppConfig.baseUrl}/lotto/search?number=$query');
    try {
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final List<dynamic> itemsJson = data['data'] ?? [];
        return itemsJson.map((json) => LottoItem.fromJson(json)).toList();
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ (‡∏£‡∏´‡∏±‡∏™: ${response.statusCode})');
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }

  // --- üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç" ---
  Future<LottoItem> getRandomLotto() async {
    final url = Uri.parse('${AppConfig.baseUrl}/lotto/random?sell_only=true');//
    try {
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['data'] != null) {
          return LottoItem.fromJson(data['data']);
        } else {
          throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°');
        }
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ (‡∏£‡∏´‡∏±‡∏™: ${response.statusCode})');
      }
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString()}');
    }
  }
 // --- ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏£‡∏ï ---
  Future<void> cashInPrize(CashInRequest request) async {
    final url = Uri.parse('${AppConfig.baseUrl}/rewards/cashIn'); // ‡πÉ‡∏ä‡πâ baseUrl ‡∏à‡∏≤‡∏Å Config
    try {
      final response = await http
          .post(
            url,
            headers: {'Content-Type': 'application/json'},
            body: jsonEncode(request.toJson()),
          )
          .timeout(const Duration(seconds: 15));

      if (response.statusCode != 200) {
        final responseBody = jsonDecode(response.body);
        final errorMessage = responseBody['error'] ?? '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô';
        throw Exception(errorMessage);
      }
      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (status 200) ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    } catch (e) {
      throw Exception('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.toString()}');
    }
  }
  
}

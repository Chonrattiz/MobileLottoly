import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http; // üéØ 1. Import http package
import 'dart:convert'; // üéØ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö jsonDecode

// üéØ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Model Class ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
class RewardData {
  final int prizeTier;
  final String lottoNumber;
  final double prizeMoney;

  RewardData({
    required this.prizeTier,
    required this.lottoNumber,
    required this.prizeMoney,
  });

  // Factory constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô Object
  factory RewardData.fromJson(Map<String, dynamic> json) {
    return RewardData(
      prizeTier: json['prize_tier'],
      lottoNumber: json['lotto_number'],
      prizeMoney: (json['prize_money'] as num).toDouble(),
    );
  }
}

// üéØ 3. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô StatefulWidget
class RewardPage extends StatefulWidget {
  const RewardPage({super.key});

  @override
  State<RewardPage> createState() => _RewardPageState();
}

class _RewardPageState extends State<RewardPage> {
  // üéØ 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á State variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  late Future<List<RewardData>> _rewardsFuture;

  @override
  void initState() {
    super.initState();
    // üéØ 5. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
    _rewardsFuture = _fetchRewards();
  }

  // üéØ 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
  Future<List<RewardData>> _fetchRewards() async {
    // --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ---

    // ‚úÖ 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç endpoint ‡∏à‡∏≤‡∏Å 'currsent' ‡πÄ‡∏õ‡πá‡∏ô 'current'

    // ‚úÖ 2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô 'localhost' ‡πÄ‡∏õ‡πá‡∏ô IP Address ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

    // ‚ÄºÔ∏è ‡∏´‡∏≤‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô Android Emulator, ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ IP ‡∏ô‡∏µ‡πâ
    final url = Uri.parse('https://api-oracel999.onrender.com/rewards/currsent');

    // ‚ÄºÔ∏è ‡∏´‡∏≤‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏£‡∏¥‡∏á, ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ IP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ß‡∏á Wi-Fi
    // final url = Uri.parse('http://192.168.1.100:8080/rewards/current'); // << ‡πÉ‡∏™‡πà IP ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

    try {
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final body = jsonDecode(response.body);
        final List<dynamic> data = body['data'];

        return data.map((json) => RewardData.fromJson(json)).toList();
      } else {
        // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Error message ‡∏ö‡∏≠‡∏Å Status Code ‡∏î‡πâ‡∏ß‡∏¢ ‡∏à‡∏∞‡πÑ‡∏î‡πâ debug ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        throw Exception(
          'Failed to load rewards: Server responded with status code ${response.statusCode}',
        );
      }
    } catch (e) {
      throw Exception('Failed to load rewards: ${e.toString()}');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        backgroundColor: const Color(0xFFE4222C),
        elevation: 0,
        toolbarHeight: 120.0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, color: Colors.white),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        title: Text(
          '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
          style: GoogleFonts.itim(color: Colors.white, fontSize: 36),
        ),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          SizedBox(
            height: double.infinity,
            width: double.infinity,
            child: Image.asset('assets/image/bg3.png', fit: BoxFit.cover),
          ),
          Column(
            children: [
              _buildActionButtons(), // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
              Expanded(
                // üéØ 7. ‡πÉ‡∏ä‡πâ FutureBuilder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                child: FutureBuilder<List<RewardData>>(
                  future: _rewardsFuture,
                  builder: (context, snapshot) {
                    // ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Center(
                        child: CircularProgressIndicator(color: Colors.white),
                      );
                    }
                    // ‡∏Å‡∏£‡∏ì‡∏µ: ‡πÄ‡∏Å‡∏¥‡∏î Error
                    if (snapshot.hasError) {
                      return Center(
                        child: Text(
                          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${snapshot.error}',
                          style: const TextStyle(color: Colors.white),
                        ),
                      );
                    }
                    // ‡∏Å‡∏£‡∏ì‡∏µ: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
                    if (!snapshot.hasData || snapshot.data!.isEmpty) {
                      return Center(
                        child: Text(
                          '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
                          style: GoogleFonts.itim(
                            color: Colors.white,
                            fontSize: 24,
                          ),
                        ),
                      );
                    }

                    // ‡∏Å‡∏£‡∏ì‡∏µ: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    final rewards = snapshot.data!;
                    return SingleChildScrollView(
                      padding: const EdgeInsets.only(bottom: 20),
                      child: _buildPrizeSection(
                        rewards,
                      ), // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                    );
                  },
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // Widget _buildActionButtons() { ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ... }
  // Widget _buildGoldBorderButton(String text) { ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ... }

  // üéØ 8. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á `_buildPrizeSection` ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rewards
  Widget _buildPrizeSection(List<RewardData> rewards) {
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡∏à‡∏≤‡∏Å list
    // ‡πÉ‡∏ä‡πâ .firstWhere ‡∏´‡∏£‡∏∑‡∏≠ loop ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ firstWhere ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢
    final prize1 = rewards.firstWhere(
      (r) => r.prizeTier == 1,
      orElse: () =>
          RewardData(prizeTier: 1, lottoNumber: '??????', prizeMoney: 0),
    );
    final prize2 = rewards.firstWhere(
      (r) => r.prizeTier == 2,
      orElse: () =>
          RewardData(prizeTier: 2, lottoNumber: '??????', prizeMoney: 0),
    );
    final prize3 = rewards.firstWhere(
      (r) => r.prizeTier == 3,
      orElse: () =>
          RewardData(prizeTier: 3, lottoNumber: '??????', prizeMoney: 0),
    );
    final prize5 = rewards.firstWhere(
      (r) => r.prizeTier == 5,
      orElse: () =>
          RewardData(prizeTier: 5, lottoNumber: '??????', prizeMoney: 0),
    );

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 32),
      child: Column(
        children: [
          _buildPrizeCard(
            '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà ${prize1.prizeTier}',
            prize1.lottoNumber,
            'Jackpot ${prize1.prizeMoney.toStringAsFixed(0)} ‡∏ø', // Format ‡πÄ‡∏á‡∏¥‡∏ô
            const Color(0xFFAD0101),
            height: 120,
            numberFontSize: 36,
            titleFontSize: 20,
            amountFontSize: 20,
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: _buildPrizeCard(
                  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà ${prize2.prizeTier}',
                  prize2.lottoNumber,
                  'win ${prize2.prizeMoney.toStringAsFixed(0)} ‡∏ø',
                  const Color(0xFFFF6600),
                  height: 120,
                  numberFontSize: 17.25,
                  titleFontSize: 12,
                  amountFontSize: 11,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _buildPrizeCard(
                  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà ${prize3.prizeTier}',
                  prize3.lottoNumber,
                  'win ${prize3.prizeMoney.toStringAsFixed(0)} ‡∏ø',
                  const Color(0xFFC2761A),
                  height: 120,
                  numberFontSize: 17.25,
                  titleFontSize: 12,
                  amountFontSize: 11,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5
          _buildPrizeCard(
            '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà ${prize5.prizeTier}',
            prize5.lottoNumber,
            'win ${prize5.prizeMoney.toStringAsFixed(0)} ‡∏ø',
            const Color(0xFF6C9C1F),
            height: 120,
            numberFontSize: 24,
            titleFontSize: 16,
            amountFontSize: 14,
          ),
        ],
      ),
    );
  }

  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Widget _buildPrizeCard ‡πÅ‡∏•‡∏∞ _buildGoldBorderButton
  // ... ‡πÇ‡∏Ñ‡πâ‡∏î Widget 2 ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ...
  Widget _buildActionButtons() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Expanded(child: _buildGoldBorderButton('‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•')),
              const SizedBox(width: 12),
              Expanded(child: _buildGoldBorderButton('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•')),
            ],
          ),
          const SizedBox(height: 12),
          _buildGoldBorderButton('‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà'),
        ],
      ),
    );
  }

  Widget _buildGoldBorderButton(String text) {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: const Color(0xFFFFD700), width: 3), // ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏≠‡∏á
        borderRadius: BorderRadius.circular(25),
      ),
      child: ElevatedButton(
        onPressed: () {},
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF90191B),
          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(25),
          ),
          elevation: 0,
        ),
        child: Text(
          text,
          style: GoogleFonts.inter(color: Colors.white, fontSize: 16),
        ),
      ),
    );
  }

  Widget _buildPrizeCard(
    String title,
    String number,
    String amount,
    Color color, {
    double height = 100,
    double numberFontSize = 20,
    double titleFontSize = 16,
    double amountFontSize = 14,
  }) {
    return Container(
      height: height,
      decoration: BoxDecoration(
        color: color.withOpacity(0.8),
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: const Color(0xFFFFD700), width: 1),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            spreadRadius: 1,
            blurRadius: 5,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              title,
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                color: const Color.fromARGB(255, 245, 223, 137),
                fontSize: titleFontSize,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              number,
              style: GoogleFonts.inter(
                color: Colors.white,
                fontSize: numberFontSize,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(
              amount,
              style: GoogleFonts.inter(
                color: const Color.fromARGB(255, 245, 223, 137),
                fontSize: amountFontSize,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
